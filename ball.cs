//
// File generated by HDevelop for HALCON/.NET (C#) Version 19.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
  // External procedures 
  // Chapter: Graphics / Text
  // Short Description: This procedure displays 'Click 'Run' to continue' in the lower right corner of the screen. 
  public void disp_continue_message (HTuple hv_WindowHandle, HTuple hv_Color, HTuple hv_Box)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_ContinueMessage = new HTuple();
    HTuple   hv_Color_COPY_INP_TMP = new HTuple(hv_Color);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays 'Press Run (F5) to continue' in the
      //lower right corner of the screen.
      //It uses the procedure disp_message.
      //
      //Input parameters:
      //WindowHandle: The window, where the text shall be displayed
      //Color: defines the text color.
      //   If set to '' or 'auto', the currently set color is used.
      //Box: If set to 'true', the text is displayed in a box.
      //
      //Convert the parameter Box to generic parameters.
      hv_GenParamName.Dispose();
      hv_GenParamName = new HTuple();
      hv_GenParamValue.Dispose();
      hv_GenParamValue = new HTuple();
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(0))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleEqual("false"))) != 0)
        {
          //Display no box
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(0));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(1))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleEqual("false"))) != 0)
        {
          //Display no shadow.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a shadow color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(1));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      //
      if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        //disp_text does not accept an empty string for Color.
        hv_Color_COPY_INP_TMP.Dispose();
        hv_Color_COPY_INP_TMP = new HTuple();
      }
      //
      //Display the message.
      hv_ContinueMessage.Dispose();
      hv_ContinueMessage = "Press Run (F5) to continue";
      HOperatorSet.DispText(hv_WindowHandle, hv_ContinueMessage, "window", "bottom", 
          "right", hv_Color_COPY_INP_TMP, hv_GenParamName, hv_GenParamValue);

      hv_Color_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_ContinueMessage.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Color_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_ContinueMessage.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Text
  // Short Description: This procedure writes a text message. 
  public void disp_message (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
      HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple   hv_Color_COPY_INP_TMP = new HTuple(hv_Color);
    HTuple   hv_Column_COPY_INP_TMP = new HTuple(hv_Column);
    HTuple   hv_CoordSystem_COPY_INP_TMP = new HTuple(hv_CoordSystem);
    HTuple   hv_Row_COPY_INP_TMP = new HTuple(hv_Row);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays text in a graphics window.
      //
      //Input parameters:
      //WindowHandle: The WindowHandle of the graphics window, where
      //   the message should be displayed
      //String: A tuple of strings containing the text message to be displayed
      //CoordSystem: If set to 'window', the text position is given
      //   with respect to the window coordinate system.
      //   If set to 'image', image coordinates are used.
      //   (This may be useful in zoomed images.)
      //Row: The row coordinate of the desired text position
      //   A tuple of values is allowed to display text at different
      //   positions.
      //Column: The column coordinate of the desired text position
      //   A tuple of values is allowed to display text at different
      //   positions.
      //Color: defines the color of the text as string.
      //   If set to [], '' or 'auto' the currently set color is used.
      //   If a tuple of strings is passed, the colors are used cyclically...
      //   - if |Row| == |Column| == 1: for each new textline
      //   = else for each text position.
      //Box: If Box[0] is set to 'true', the text is written within an orange box.
      //     If set to' false', no box is displayed.
      //     If set to a color string (e.g. 'white', '#FF00CC', etc.),
      //       the text is written in a box of that color.
      //     An optional second value for Box (Box[1]) controls if a shadow is displayed:
      //       'true' -> display a shadow in a default color
      //       'false' -> display no shadow
      //       otherwise -> use given string as color string for the shadow color
      //
      //It is possible to display multiple text strings in a single call.
      //In this case, some restrictions apply:
      //- Multiple text positions can be defined by specifying a tuple
      //  with multiple Row and/or Column coordinates, i.e.:
      //  - |Row| == n, |Column| == n
      //  - |Row| == n, |Column| == 1
      //  - |Row| == 1, |Column| == n
      //- If |Row| == |Column| == 1,
      //  each element of String is display in a new textline.
      //- If multiple positions or specified, the number of Strings
      //  must match the number of positions, i.e.:
      //  - Either |String| == n (each string is displayed at the
      //                          corresponding position),
      //  - or     |String| == 1 (The string is displayed n times).
      //
      //
      //Convert the parameters for disp_text.
      if ((int)((new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
      {

        hv_Color_COPY_INP_TMP.Dispose();
        hv_Column_COPY_INP_TMP.Dispose();
        hv_CoordSystem_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP.Dispose();
        hv_GenParamName.Dispose();
        hv_GenParamValue.Dispose();

        return;
      }
      if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Row_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP = 12;
      }
      if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Column_COPY_INP_TMP.Dispose();
        hv_Column_COPY_INP_TMP = 12;
      }
      //
      //Convert the parameter Box to generic parameters.
      hv_GenParamName.Dispose();
      hv_GenParamName = new HTuple();
      hv_GenParamValue.Dispose();
      hv_GenParamValue = new HTuple();
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(0))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleEqual("false"))) != 0)
        {
          //Display no box
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(0));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(1))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleEqual("false"))) != 0)
        {
          //Display no shadow.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a shadow color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(1));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      //Restore default CoordSystem behavior.
      if ((int)(new HTuple(hv_CoordSystem_COPY_INP_TMP.TupleNotEqual("window"))) != 0)
      {
        hv_CoordSystem_COPY_INP_TMP.Dispose();
        hv_CoordSystem_COPY_INP_TMP = "image";
      }
      //
      if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        //disp_text does not accept an empty string for Color.
        hv_Color_COPY_INP_TMP.Dispose();
        hv_Color_COPY_INP_TMP = new HTuple();
      }
      //
      HOperatorSet.DispText(hv_WindowHandle, hv_String, hv_CoordSystem_COPY_INP_TMP, 
          hv_Row_COPY_INP_TMP, hv_Column_COPY_INP_TMP, hv_Color_COPY_INP_TMP, hv_GenParamName, 
          hv_GenParamValue);

      hv_Color_COPY_INP_TMP.Dispose();
      hv_Column_COPY_INP_TMP.Dispose();
      hv_CoordSystem_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Color_COPY_INP_TMP.Dispose();
      hv_Column_COPY_INP_TMP.Dispose();
      hv_CoordSystem_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Text
  // Short Description: Set font independent of OS 
  public void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
      HTuple hv_Bold, HTuple hv_Slant)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_OS = new HTuple(), hv_Fonts = new HTuple();
    HTuple hv_Style = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_AvailableFonts = new HTuple(), hv_Fdx = new HTuple();
    HTuple hv_Indices = new HTuple();
    HTuple   hv_Font_COPY_INP_TMP = new HTuple(hv_Font);
    HTuple   hv_Size_COPY_INP_TMP = new HTuple(hv_Size);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure sets the text font of the current window with
      //the specified attributes.
      //
      //Input parameters:
      //WindowHandle: The graphics window for which the font will be set
      //Size: The font size. If Size=-1, the default of 16 is used.
      //Bold: If set to 'true', a bold font is used
      //Slant: If set to 'true', a slanted font is used
      //
      hv_OS.Dispose();
      HOperatorSet.GetSystem("operating_system", out hv_OS);
      if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
      {
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = 16;
      }
      if ((int)(new HTuple(((hv_OS.TupleSubstr(0,2))).TupleEqual("Win"))) != 0)
      {
        //Restore previous behaviour
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = ((1.13677*hv_Size_COPY_INP_TMP)).TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      else
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = hv_Size_COPY_INP_TMP.TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Courier";
        hv_Fonts[1] = "Courier 10 Pitch";
        hv_Fonts[2] = "Courier New";
        hv_Fonts[3] = "CourierNew";
        hv_Fonts[4] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Consolas";
        hv_Fonts[1] = "Menlo";
        hv_Fonts[2] = "Courier";
        hv_Fonts[3] = "Courier 10 Pitch";
        hv_Fonts[4] = "FreeMono";
        hv_Fonts[5] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Luxi Sans";
        hv_Fonts[1] = "DejaVu Sans";
        hv_Fonts[2] = "FreeSans";
        hv_Fonts[3] = "Arial";
        hv_Fonts[4] = "Liberation Sans";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Times New Roman";
        hv_Fonts[1] = "Luxi Serif";
        hv_Fonts[2] = "DejaVu Serif";
        hv_Fonts[3] = "FreeSerif";
        hv_Fonts[4] = "Utopia";
        hv_Fonts[5] = "Liberation Serif";
      }
      else
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple(hv_Font_COPY_INP_TMP);
      }
      hv_Style.Dispose();
      hv_Style = "";
      if ((int)(new HTuple(hv_Bold.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Bold";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Bold.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Italic";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Slant.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Style.TupleEqual(""))) != 0)
      {
        hv_Style.Dispose();
        hv_Style = "Normal";
      }
      hv_AvailableFonts.Dispose();
      HOperatorSet.QueryFont(hv_WindowHandle, out hv_AvailableFonts);
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = "";
      for (hv_Fdx=0; (int)hv_Fdx<=(int)((new HTuple(hv_Fonts.TupleLength()))-1); hv_Fdx = (int)hv_Fdx + 1)
      {
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_AvailableFonts.TupleFind(
            hv_Fonts.TupleSelect(hv_Fdx));
        }
        if ((int)(new HTuple((new HTuple(hv_Indices.TupleLength())).TupleGreater(
            0))) != 0)
        {
          if ((int)(new HTuple(((hv_Indices.TupleSelect(0))).TupleGreaterEqual(0))) != 0)
          {
            hv_Font_COPY_INP_TMP.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(
                hv_Fdx);
            }
            break;
          }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        throw new HalconException("Wrong value of control parameter Font");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Font = (((hv_Font_COPY_INP_TMP+"-")+hv_Style)+"-")+hv_Size_COPY_INP_TMP;
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = ExpTmpLocalVar_Font;
      }
      }
      HOperatorSet.SetFont(hv_WindowHandle, hv_Font_COPY_INP_TMP);

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      throw HDevExpDefaultException;
    }
  }

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Bond, ho_Bright, ho_Die, ho_DieGrey;
    HObject ho_Wires, ho_WiresFilled, ho_Balls, ho_SingleBalls;
    HObject ho_IntermediateBalls, ho_FinalBalls;

    // Local control variables 

    HTuple hv_WindowID = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
    HTuple hv_NumBalls = new HTuple(), hv_Diameter = new HTuple();
    HTuple hv_meanDiameter = new HTuple(), hv_minDiameter = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Bond);
    HOperatorSet.GenEmptyObj(out ho_Bright);
    HOperatorSet.GenEmptyObj(out ho_Die);
    HOperatorSet.GenEmptyObj(out ho_DieGrey);
    HOperatorSet.GenEmptyObj(out ho_Wires);
    HOperatorSet.GenEmptyObj(out ho_WiresFilled);
    HOperatorSet.GenEmptyObj(out ho_Balls);
    HOperatorSet.GenEmptyObj(out ho_SingleBalls);
    HOperatorSet.GenEmptyObj(out ho_IntermediateBalls);
    HOperatorSet.GenEmptyObj(out ho_FinalBalls);
    try
    {
      //ball.hdev: Inspection of Ball Bonding
      //
      // dev_update_window(...); only in hdevelop
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.CloseWindow(HDevWindowStack.Pop());
      }
      HOperatorSet.SetWindowAttr("background_color","black");
      HOperatorSet.OpenWindow(0,0,728,512,0,"visible","",out hv_WindowID);
      HDevWindowStack.Push(hv_WindowID);
      ho_Bond.Dispose();
      HOperatorSet.ReadImage(out ho_Bond, "die/die_03");
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Bond, HDevWindowStack.GetActive());
      }
      set_display_font(hv_WindowID, 14, "mono", "true", "false");
      disp_continue_message(hv_WindowID, "black", "true");
      // stop(...); only in hdevelop
      ho_Bright.Dispose();
      HOperatorSet.Threshold(ho_Bond, out ho_Bright, 100, 255);
      ho_Die.Dispose();
      HOperatorSet.ShapeTrans(ho_Bright, out ho_Die, "rectangle2");
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetLineWidth(HDevWindowStack.GetActive(), 3);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Die, HDevWindowStack.GetActive());
      }
      disp_continue_message(hv_WindowID, "black", "true");
      // stop(...); only in hdevelop
      ho_DieGrey.Dispose();
      HOperatorSet.ReduceDomain(ho_Bond, ho_Die, out ho_DieGrey);
      ho_Wires.Dispose();
      HOperatorSet.Threshold(ho_DieGrey, out ho_Wires, 0, 50);
      ho_WiresFilled.Dispose();
      HOperatorSet.FillUpShape(ho_Wires, out ho_WiresFilled, "area", 1, 100);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Bond, HDevWindowStack.GetActive());
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "fill");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "red");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_WiresFilled, HDevWindowStack.GetActive());
      }
      disp_continue_message(hv_WindowID, "black", "true");
      // stop(...); only in hdevelop
      ho_Balls.Dispose();
      HOperatorSet.OpeningCircle(ho_WiresFilled, out ho_Balls, 15.5);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Balls, HDevWindowStack.GetActive());
      }
      disp_continue_message(hv_WindowID, "black", "true");
      // stop(...); only in hdevelop
      ho_SingleBalls.Dispose();
      HOperatorSet.Connection(ho_Balls, out ho_SingleBalls);
      ho_IntermediateBalls.Dispose();
      HOperatorSet.SelectShape(ho_SingleBalls, out ho_IntermediateBalls, "circularity", 
          "and", 0.85, 1.0);
      ho_FinalBalls.Dispose();
      HOperatorSet.SortRegion(ho_IntermediateBalls, out ho_FinalBalls, "first_point", 
          "true", "column");
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Bond, HDevWindowStack.GetActive());
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColored(HDevWindowStack.GetActive(), 12);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_FinalBalls, HDevWindowStack.GetActive());
      }
      disp_continue_message(hv_WindowID, "black", "true");
      // stop(...); only in hdevelop
      hv_Row.Dispose();hv_Column.Dispose();hv_Radius.Dispose();
      HOperatorSet.SmallestCircle(ho_FinalBalls, out hv_Row, out hv_Column, out hv_Radius);
      hv_NumBalls.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NumBalls = new HTuple(hv_Radius.TupleLength()
          );
      }
      hv_Diameter.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Diameter = 2*hv_Radius;
      }
      hv_meanDiameter.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_meanDiameter = hv_Diameter.TupleMean()
          ;
      }
      hv_minDiameter.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_minDiameter = hv_Diameter.TupleMin()
          ;
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Bond, HDevWindowStack.GetActive());
      }
      HOperatorSet.DispCircle(hv_WindowID, hv_Row, hv_Column, hv_Radius);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "white");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowID, "D: "+(hv_Diameter.TupleString(".4")), "image", hv_Row-(2*hv_Radius), 
          hv_Column, "white", "false");
      }
      // dev_update_window(...); only in hdevelop
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Bond.Dispose();
      ho_Bright.Dispose();
      ho_Die.Dispose();
      ho_DieGrey.Dispose();
      ho_Wires.Dispose();
      ho_WiresFilled.Dispose();
      ho_Balls.Dispose();
      ho_SingleBalls.Dispose();
      ho_IntermediateBalls.Dispose();
      ho_FinalBalls.Dispose();

      hv_WindowID.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Radius.Dispose();
      hv_NumBalls.Dispose();
      hv_Diameter.Dispose();
      hv_meanDiameter.Dispose();
      hv_minDiameter.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Bond.Dispose();
    ho_Bright.Dispose();
    ho_Die.Dispose();
    ho_DieGrey.Dispose();
    ho_Wires.Dispose();
    ho_WiresFilled.Dispose();
    ho_Balls.Dispose();
    ho_SingleBalls.Dispose();
    ho_IntermediateBalls.Dispose();
    ho_FinalBalls.Dispose();

    hv_WindowID.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Radius.Dispose();
    hv_NumBalls.Dispose();
    hv_Diameter.Dispose();
    hv_meanDiameter.Dispose();
    hv_minDiameter.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

